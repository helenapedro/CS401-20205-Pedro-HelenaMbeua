Two ways to obtain infinite streams (remember stream operations are lazy):
    a. generate
    b. iterate


a. The generate function accepts a Supplier<T> argument.
    In practice, this means that it accepts functions (lambda expressions) with zero parameters.
    interface Supplier<T> {
        T get();
    }
Example: Stream of constant values (“Echo”):
    Stream<String> echoes = Stream.generate(() -> "Echo");
Example: Stream of random numbers:
    Stream<Double> randoms = Stream.generate(Math::random);

b. The iterate function accepts a seed value (of type T) and a UnaryOperator<T> argument.
    interface UnaryOperator<T> {
        T apply(T t);
    }
    Example: Stream of natural numbers: (Here, T is Integer)
        Stream<Integer> stream2 = Stream.iterate(1, n -> n + 1));
